/* tslint:disable */
/* eslint-disable */
/**
 * Tasks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  HTTPValidationError,
  TaskCreateInput,
  TaskOutput,
  TaskUpdateInput,
} from '../models';
import {
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    TaskCreateInputFromJSON,
    TaskCreateInputToJSON,
    TaskOutputFromJSON,
    TaskOutputToJSON,
    TaskUpdateInputFromJSON,
    TaskUpdateInputToJSON,
} from '../models';

export interface CreateTaskApiTasksPostRequest {
    taskCreateInput: TaskCreateInput;
}

export interface DeleteTaskApiTasksIdDeleteRequest {
    id: number;
}

export interface GetTaskApiTasksIdGetRequest {
    id: number;
}

export interface UpdateTaskApiTasksIdPutRequest {
    id: number;
    taskUpdateInput: TaskUpdateInput;
}

/**
 * 
 */
export class TaskApi extends runtime.BaseAPI {

    /**
     * Create Task
     */
    async createTaskApiTasksPostRaw(requestParameters: CreateTaskApiTasksPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TaskOutput>> {
        if (requestParameters.taskCreateInput === null || requestParameters.taskCreateInput === undefined) {
            throw new runtime.RequiredError('taskCreateInput','Required parameter requestParameters.taskCreateInput was null or undefined when calling createTaskApiTasksPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2PasswordBearer", []);
        }

        const response = await this.request({
            path: `/api/tasks/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TaskCreateInputToJSON(requestParameters.taskCreateInput),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TaskOutputFromJSON(jsonValue));
    }

    /**
     * Create Task
     */
    async createTaskApiTasksPost(requestParameters: CreateTaskApiTasksPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TaskOutput> {
        const response = await this.createTaskApiTasksPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete Task
     */
    async deleteTaskApiTasksIdDeleteRaw(requestParameters: DeleteTaskApiTasksIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteTaskApiTasksIdDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2PasswordBearer", []);
        }

        const response = await this.request({
            path: `/api/tasks/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete Task
     */
    async deleteTaskApiTasksIdDelete(requestParameters: DeleteTaskApiTasksIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteTaskApiTasksIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Get Task
     */
    async getTaskApiTasksIdGetRaw(requestParameters: GetTaskApiTasksIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TaskOutput>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getTaskApiTasksIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2PasswordBearer", []);
        }

        const response = await this.request({
            path: `/api/tasks/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TaskOutputFromJSON(jsonValue));
    }

    /**
     * Get Task
     */
    async getTaskApiTasksIdGet(requestParameters: GetTaskApiTasksIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TaskOutput> {
        const response = await this.getTaskApiTasksIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List Tasks
     */
    async listTasksApiTasksGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<TaskOutput>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2PasswordBearer", []);
        }

        const response = await this.request({
            path: `/api/tasks/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TaskOutputFromJSON));
    }

    /**
     * List Tasks
     */
    async listTasksApiTasksGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<TaskOutput>> {
        const response = await this.listTasksApiTasksGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Update Task
     */
    async updateTaskApiTasksIdPutRaw(requestParameters: UpdateTaskApiTasksIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TaskOutput>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateTaskApiTasksIdPut.');
        }

        if (requestParameters.taskUpdateInput === null || requestParameters.taskUpdateInput === undefined) {
            throw new runtime.RequiredError('taskUpdateInput','Required parameter requestParameters.taskUpdateInput was null or undefined when calling updateTaskApiTasksIdPut.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2PasswordBearer", []);
        }

        const response = await this.request({
            path: `/api/tasks/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: TaskUpdateInputToJSON(requestParameters.taskUpdateInput),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TaskOutputFromJSON(jsonValue));
    }

    /**
     * Update Task
     */
    async updateTaskApiTasksIdPut(requestParameters: UpdateTaskApiTasksIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TaskOutput> {
        const response = await this.updateTaskApiTasksIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
