/* tslint:disable */
/* eslint-disable */
/**
 * Tasks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  HTTPValidationError,
  LoginInput,
  LogoutInput,
  RegisterInput,
  TokenOutput,
  UserOutput,
} from '../models';
import {
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    LoginInputFromJSON,
    LoginInputToJSON,
    LogoutInputFromJSON,
    LogoutInputToJSON,
    RegisterInputFromJSON,
    RegisterInputToJSON,
    TokenOutputFromJSON,
    TokenOutputToJSON,
    UserOutputFromJSON,
    UserOutputToJSON,
} from '../models';

export interface LoginApiUsersLoginPostRequest {
    loginInput: LoginInput;
}

export interface LogoutApiUsersLogoutPostRequest {
    logoutInput: LogoutInput;
}

export interface RegisterApiUsersRegisterPostRequest {
    registerInput: RegisterInput;
}

/**
 * 
 */
export class UserApi extends runtime.BaseAPI {

    /**
     * Check
     */
    async checkApiUsersCheckGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserOutput>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/users/check`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserOutputFromJSON(jsonValue));
    }

    /**
     * Check
     */
    async checkApiUsersCheckGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserOutput> {
        const response = await this.checkApiUsersCheckGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Login
     */
    async loginApiUsersLoginPostRaw(requestParameters: LoginApiUsersLoginPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TokenOutput>> {
        if (requestParameters.loginInput === null || requestParameters.loginInput === undefined) {
            throw new runtime.RequiredError('loginInput','Required parameter requestParameters.loginInput was null or undefined when calling loginApiUsersLoginPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/users/login`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LoginInputToJSON(requestParameters.loginInput),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TokenOutputFromJSON(jsonValue));
    }

    /**
     * Login
     */
    async loginApiUsersLoginPost(requestParameters: LoginApiUsersLoginPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TokenOutput> {
        const response = await this.loginApiUsersLoginPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Logout
     */
    async logoutApiUsersLogoutPostRaw(requestParameters: LogoutApiUsersLogoutPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.logoutInput === null || requestParameters.logoutInput === undefined) {
            throw new runtime.RequiredError('logoutInput','Required parameter requestParameters.logoutInput was null or undefined when calling logoutApiUsersLogoutPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/users/logout`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LogoutInputToJSON(requestParameters.logoutInput),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Logout
     */
    async logoutApiUsersLogoutPost(requestParameters: LogoutApiUsersLogoutPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.logoutApiUsersLogoutPostRaw(requestParameters, initOverrides);
    }

    /**
     * Register
     */
    async registerApiUsersRegisterPostRaw(requestParameters: RegisterApiUsersRegisterPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TokenOutput>> {
        if (requestParameters.registerInput === null || requestParameters.registerInput === undefined) {
            throw new runtime.RequiredError('registerInput','Required parameter requestParameters.registerInput was null or undefined when calling registerApiUsersRegisterPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/users/register`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RegisterInputToJSON(requestParameters.registerInput),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TokenOutputFromJSON(jsonValue));
    }

    /**
     * Register
     */
    async registerApiUsersRegisterPost(requestParameters: RegisterApiUsersRegisterPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TokenOutput> {
        const response = await this.registerApiUsersRegisterPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
